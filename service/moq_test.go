// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/yuyacode/AppLiftMessageApi/entity"
	"github.com/yuyacode/AppLiftMessageApi/store"
	"sync"
)

// Ensure, that MessageOwnerGetterMock does implement MessageOwnerGetter.
// If this is not the case, regenerate this file with moq.
var _ MessageOwnerGetter = &MessageOwnerGetterMock{}

// MessageOwnerGetterMock is a mock implementation of MessageOwnerGetter.
//
//	func TestSomethingThatUsesMessageOwnerGetter(t *testing.T) {
//
//		// make and configure a mocked MessageOwnerGetter
//		mockedMessageOwnerGetter := &MessageOwnerGetterMock{
//			GetThreadCompanyOwnerFunc: func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error) {
//				panic("mock out the GetThreadCompanyOwner method")
//			},
//			GetThreadCompanyOwnerByMessageIDFunc: func(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error) {
//				panic("mock out the GetThreadCompanyOwnerByMessageID method")
//			},
//			GetThreadStudentOwnerFunc: func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error) {
//				panic("mock out the GetThreadStudentOwner method")
//			},
//			GetThreadStudentOwnerByMessageIDFunc: func(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error) {
//				panic("mock out the GetThreadStudentOwnerByMessageID method")
//			},
//		}
//
//		// use mockedMessageOwnerGetter in code that requires MessageOwnerGetter
//		// and then make assertions.
//
//	}
type MessageOwnerGetterMock struct {
	// GetThreadCompanyOwnerFunc mocks the GetThreadCompanyOwner method.
	GetThreadCompanyOwnerFunc func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error)

	// GetThreadCompanyOwnerByMessageIDFunc mocks the GetThreadCompanyOwnerByMessageID method.
	GetThreadCompanyOwnerByMessageIDFunc func(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error)

	// GetThreadStudentOwnerFunc mocks the GetThreadStudentOwner method.
	GetThreadStudentOwnerFunc func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error)

	// GetThreadStudentOwnerByMessageIDFunc mocks the GetThreadStudentOwnerByMessageID method.
	GetThreadStudentOwnerByMessageIDFunc func(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetThreadCompanyOwner holds details about calls to the GetThreadCompanyOwner method.
		GetThreadCompanyOwner []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageThreadID is the messageThreadID argument value.
			MessageThreadID entity.MessageThreadID
		}
		// GetThreadCompanyOwnerByMessageID holds details about calls to the GetThreadCompanyOwnerByMessageID method.
		GetThreadCompanyOwnerByMessageID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageID is the messageID argument value.
			MessageID entity.MessageID
		}
		// GetThreadStudentOwner holds details about calls to the GetThreadStudentOwner method.
		GetThreadStudentOwner []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageThreadID is the messageThreadID argument value.
			MessageThreadID entity.MessageThreadID
		}
		// GetThreadStudentOwnerByMessageID holds details about calls to the GetThreadStudentOwnerByMessageID method.
		GetThreadStudentOwnerByMessageID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageID is the messageID argument value.
			MessageID entity.MessageID
		}
	}
	lockGetThreadCompanyOwner            sync.RWMutex
	lockGetThreadCompanyOwnerByMessageID sync.RWMutex
	lockGetThreadStudentOwner            sync.RWMutex
	lockGetThreadStudentOwnerByMessageID sync.RWMutex
}

// GetThreadCompanyOwner calls GetThreadCompanyOwnerFunc.
func (mock *MessageOwnerGetterMock) GetThreadCompanyOwner(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error) {
	if mock.GetThreadCompanyOwnerFunc == nil {
		panic("MessageOwnerGetterMock.GetThreadCompanyOwnerFunc: method is nil but MessageOwnerGetter.GetThreadCompanyOwner was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}{
		Ctx:             ctx,
		Db:              db,
		MessageThreadID: messageThreadID,
	}
	mock.lockGetThreadCompanyOwner.Lock()
	mock.calls.GetThreadCompanyOwner = append(mock.calls.GetThreadCompanyOwner, callInfo)
	mock.lockGetThreadCompanyOwner.Unlock()
	return mock.GetThreadCompanyOwnerFunc(ctx, db, messageThreadID)
}

// GetThreadCompanyOwnerCalls gets all the calls that were made to GetThreadCompanyOwner.
// Check the length with:
//
//	len(mockedMessageOwnerGetter.GetThreadCompanyOwnerCalls())
func (mock *MessageOwnerGetterMock) GetThreadCompanyOwnerCalls() []struct {
	Ctx             context.Context
	Db              store.Queryer
	MessageThreadID entity.MessageThreadID
} {
	var calls []struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}
	mock.lockGetThreadCompanyOwner.RLock()
	calls = mock.calls.GetThreadCompanyOwner
	mock.lockGetThreadCompanyOwner.RUnlock()
	return calls
}

// GetThreadCompanyOwnerByMessageID calls GetThreadCompanyOwnerByMessageIDFunc.
func (mock *MessageOwnerGetterMock) GetThreadCompanyOwnerByMessageID(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error) {
	if mock.GetThreadCompanyOwnerByMessageIDFunc == nil {
		panic("MessageOwnerGetterMock.GetThreadCompanyOwnerByMessageIDFunc: method is nil but MessageOwnerGetter.GetThreadCompanyOwnerByMessageID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Db        store.Queryer
		MessageID entity.MessageID
	}{
		Ctx:       ctx,
		Db:        db,
		MessageID: messageID,
	}
	mock.lockGetThreadCompanyOwnerByMessageID.Lock()
	mock.calls.GetThreadCompanyOwnerByMessageID = append(mock.calls.GetThreadCompanyOwnerByMessageID, callInfo)
	mock.lockGetThreadCompanyOwnerByMessageID.Unlock()
	return mock.GetThreadCompanyOwnerByMessageIDFunc(ctx, db, messageID)
}

// GetThreadCompanyOwnerByMessageIDCalls gets all the calls that were made to GetThreadCompanyOwnerByMessageID.
// Check the length with:
//
//	len(mockedMessageOwnerGetter.GetThreadCompanyOwnerByMessageIDCalls())
func (mock *MessageOwnerGetterMock) GetThreadCompanyOwnerByMessageIDCalls() []struct {
	Ctx       context.Context
	Db        store.Queryer
	MessageID entity.MessageID
} {
	var calls []struct {
		Ctx       context.Context
		Db        store.Queryer
		MessageID entity.MessageID
	}
	mock.lockGetThreadCompanyOwnerByMessageID.RLock()
	calls = mock.calls.GetThreadCompanyOwnerByMessageID
	mock.lockGetThreadCompanyOwnerByMessageID.RUnlock()
	return calls
}

// GetThreadStudentOwner calls GetThreadStudentOwnerFunc.
func (mock *MessageOwnerGetterMock) GetThreadStudentOwner(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (int64, error) {
	if mock.GetThreadStudentOwnerFunc == nil {
		panic("MessageOwnerGetterMock.GetThreadStudentOwnerFunc: method is nil but MessageOwnerGetter.GetThreadStudentOwner was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}{
		Ctx:             ctx,
		Db:              db,
		MessageThreadID: messageThreadID,
	}
	mock.lockGetThreadStudentOwner.Lock()
	mock.calls.GetThreadStudentOwner = append(mock.calls.GetThreadStudentOwner, callInfo)
	mock.lockGetThreadStudentOwner.Unlock()
	return mock.GetThreadStudentOwnerFunc(ctx, db, messageThreadID)
}

// GetThreadStudentOwnerCalls gets all the calls that were made to GetThreadStudentOwner.
// Check the length with:
//
//	len(mockedMessageOwnerGetter.GetThreadStudentOwnerCalls())
func (mock *MessageOwnerGetterMock) GetThreadStudentOwnerCalls() []struct {
	Ctx             context.Context
	Db              store.Queryer
	MessageThreadID entity.MessageThreadID
} {
	var calls []struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}
	mock.lockGetThreadStudentOwner.RLock()
	calls = mock.calls.GetThreadStudentOwner
	mock.lockGetThreadStudentOwner.RUnlock()
	return calls
}

// GetThreadStudentOwnerByMessageID calls GetThreadStudentOwnerByMessageIDFunc.
func (mock *MessageOwnerGetterMock) GetThreadStudentOwnerByMessageID(ctx context.Context, db store.Queryer, messageID entity.MessageID) (int64, error) {
	if mock.GetThreadStudentOwnerByMessageIDFunc == nil {
		panic("MessageOwnerGetterMock.GetThreadStudentOwnerByMessageIDFunc: method is nil but MessageOwnerGetter.GetThreadStudentOwnerByMessageID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Db        store.Queryer
		MessageID entity.MessageID
	}{
		Ctx:       ctx,
		Db:        db,
		MessageID: messageID,
	}
	mock.lockGetThreadStudentOwnerByMessageID.Lock()
	mock.calls.GetThreadStudentOwnerByMessageID = append(mock.calls.GetThreadStudentOwnerByMessageID, callInfo)
	mock.lockGetThreadStudentOwnerByMessageID.Unlock()
	return mock.GetThreadStudentOwnerByMessageIDFunc(ctx, db, messageID)
}

// GetThreadStudentOwnerByMessageIDCalls gets all the calls that were made to GetThreadStudentOwnerByMessageID.
// Check the length with:
//
//	len(mockedMessageOwnerGetter.GetThreadStudentOwnerByMessageIDCalls())
func (mock *MessageOwnerGetterMock) GetThreadStudentOwnerByMessageIDCalls() []struct {
	Ctx       context.Context
	Db        store.Queryer
	MessageID entity.MessageID
} {
	var calls []struct {
		Ctx       context.Context
		Db        store.Queryer
		MessageID entity.MessageID
	}
	mock.lockGetThreadStudentOwnerByMessageID.RLock()
	calls = mock.calls.GetThreadStudentOwnerByMessageID
	mock.lockGetThreadStudentOwnerByMessageID.RUnlock()
	return calls
}

// Ensure, that MessageGetterMock does implement MessageGetter.
// If this is not the case, regenerate this file with moq.
var _ MessageGetter = &MessageGetterMock{}

// MessageGetterMock is a mock implementation of MessageGetter.
//
//	func TestSomethingThatUsesMessageGetter(t *testing.T) {
//
//		// make and configure a mocked MessageGetter
//		mockedMessageGetter := &MessageGetterMock{
//			GetAllMessagesForCompanyUserFunc: func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error) {
//				panic("mock out the GetAllMessagesForCompanyUser method")
//			},
//			GetAllMessagesForStudentUserFunc: func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error) {
//				panic("mock out the GetAllMessagesForStudentUser method")
//			},
//		}
//
//		// use mockedMessageGetter in code that requires MessageGetter
//		// and then make assertions.
//
//	}
type MessageGetterMock struct {
	// GetAllMessagesForCompanyUserFunc mocks the GetAllMessagesForCompanyUser method.
	GetAllMessagesForCompanyUserFunc func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error)

	// GetAllMessagesForStudentUserFunc mocks the GetAllMessagesForStudentUser method.
	GetAllMessagesForStudentUserFunc func(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllMessagesForCompanyUser holds details about calls to the GetAllMessagesForCompanyUser method.
		GetAllMessagesForCompanyUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageThreadID is the messageThreadID argument value.
			MessageThreadID entity.MessageThreadID
		}
		// GetAllMessagesForStudentUser holds details about calls to the GetAllMessagesForStudentUser method.
		GetAllMessagesForStudentUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
			// MessageThreadID is the messageThreadID argument value.
			MessageThreadID entity.MessageThreadID
		}
	}
	lockGetAllMessagesForCompanyUser sync.RWMutex
	lockGetAllMessagesForStudentUser sync.RWMutex
}

// GetAllMessagesForCompanyUser calls GetAllMessagesForCompanyUserFunc.
func (mock *MessageGetterMock) GetAllMessagesForCompanyUser(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error) {
	if mock.GetAllMessagesForCompanyUserFunc == nil {
		panic("MessageGetterMock.GetAllMessagesForCompanyUserFunc: method is nil but MessageGetter.GetAllMessagesForCompanyUser was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}{
		Ctx:             ctx,
		Db:              db,
		MessageThreadID: messageThreadID,
	}
	mock.lockGetAllMessagesForCompanyUser.Lock()
	mock.calls.GetAllMessagesForCompanyUser = append(mock.calls.GetAllMessagesForCompanyUser, callInfo)
	mock.lockGetAllMessagesForCompanyUser.Unlock()
	return mock.GetAllMessagesForCompanyUserFunc(ctx, db, messageThreadID)
}

// GetAllMessagesForCompanyUserCalls gets all the calls that were made to GetAllMessagesForCompanyUser.
// Check the length with:
//
//	len(mockedMessageGetter.GetAllMessagesForCompanyUserCalls())
func (mock *MessageGetterMock) GetAllMessagesForCompanyUserCalls() []struct {
	Ctx             context.Context
	Db              store.Queryer
	MessageThreadID entity.MessageThreadID
} {
	var calls []struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}
	mock.lockGetAllMessagesForCompanyUser.RLock()
	calls = mock.calls.GetAllMessagesForCompanyUser
	mock.lockGetAllMessagesForCompanyUser.RUnlock()
	return calls
}

// GetAllMessagesForStudentUser calls GetAllMessagesForStudentUserFunc.
func (mock *MessageGetterMock) GetAllMessagesForStudentUser(ctx context.Context, db store.Queryer, messageThreadID entity.MessageThreadID) (entity.Messages, error) {
	if mock.GetAllMessagesForStudentUserFunc == nil {
		panic("MessageGetterMock.GetAllMessagesForStudentUserFunc: method is nil but MessageGetter.GetAllMessagesForStudentUser was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}{
		Ctx:             ctx,
		Db:              db,
		MessageThreadID: messageThreadID,
	}
	mock.lockGetAllMessagesForStudentUser.Lock()
	mock.calls.GetAllMessagesForStudentUser = append(mock.calls.GetAllMessagesForStudentUser, callInfo)
	mock.lockGetAllMessagesForStudentUser.Unlock()
	return mock.GetAllMessagesForStudentUserFunc(ctx, db, messageThreadID)
}

// GetAllMessagesForStudentUserCalls gets all the calls that were made to GetAllMessagesForStudentUser.
// Check the length with:
//
//	len(mockedMessageGetter.GetAllMessagesForStudentUserCalls())
func (mock *MessageGetterMock) GetAllMessagesForStudentUserCalls() []struct {
	Ctx             context.Context
	Db              store.Queryer
	MessageThreadID entity.MessageThreadID
} {
	var calls []struct {
		Ctx             context.Context
		Db              store.Queryer
		MessageThreadID entity.MessageThreadID
	}
	mock.lockGetAllMessagesForStudentUser.RLock()
	calls = mock.calls.GetAllMessagesForStudentUser
	mock.lockGetAllMessagesForStudentUser.RUnlock()
	return calls
}
